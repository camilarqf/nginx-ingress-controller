def remote1 = [:]
remote1.name = 'zona1'
remote1.host = '192.168.1.10'
remote1.allowAnyHosts = true

def remote2 = [:]
remote2.name = 'zona1'
remote2.host = '192.168.1.2'
remote2.allowAnyHosts = true

def remote3 = [:]
remote3.name = 'zona1'
remote3.host = '192.168.1.3'
remote3.allowAnyHosts = true

remotezones = [remote1, remote2, remote3]

docker_image_name = 'nginx-ingress-controller-img'
dockerfile_name = 'Dockerfile'

def service = [:]
service.name = 'nginx-ingress-controller'
service.internal_port = 80
service.external_port = 80

services = [service]

pipeline {

    environment {
        nomeImagem = "${NOME_IMAGEM}"
        registry = "192.168.1.9:5000/"
        DEPLOY_CRED = credentials('root')
    }

    agent any
    
    stages {
        
        stage('Configurar credenciais'){
             steps {
                script {
                    remote1.user="$DEPLOY_CRED_USR"
                    remote1.password="$DEPLOY_CRED_PSW"
                    remote2.user="$DEPLOY_CRED_USR"
                    remote2.password="$DEPLOY_CRED_PSW"
                    remote3.user="$DEPLOY_CRED_USR"
                    remote3.password="$DEPLOY_CRED_PSW"
                }
            }
           
        }
        

        stage('Construindo imagem') {
            steps {
                script {
                    build_image()
                }
            }
        }
        
        stage('Destruindo containers') {
            steps {
                script {
                    update_service()
                }
            }
        }

        stage('Recuperando imagem nos servidores') {
            steps {
                script {
                    pull_image()
                }
            }
        }

        stage('Criando containers nos servidores') {
            steps {
                script {
                    create_containers()
                }
            }
        }
        
    }
    
    post {
        always {
            notify_on_discord();            
        }
    }
}
def build_image() {
    try {
        docker.withRegistry('http://10.233.137.2:5000') {
            def customImage = docker.build("${docker_image_name}:${env.BUILD_ID}", "-f ${dockerfile_name} .")
            customImage.push()
        }
    } catch (Exception e) {
        sh "echo $e"
        currentBuild.result = 'ABORTED'
        error('Erro')
    }
}

def destroy_containers() {
    try {
        for(int i = 0; i < remotezones.size(); i++) {
            for(int j = 0; j < containers.size(); j++) {
                sshCommand remote: remotezones[i], command: "docker rm -f ${containers[j].name}"
            }
        }
    } catch (Exception e) {
        sh "echo $e"
    }
}

def pull_image() {
    try {
        for(int i = 0; i < remotezones.size(); i++) {
            sshCommand remote: remotezones[i], command: "docker pull " + registry + "${docker_image_name}:${env.BUILD_ID}"
        }
    } catch (Exception e) {
        sh "echo $e"
        currentBuild.result = 'ABORTED'
        error('Erro')
    }
}

def create_containers() {
    try {
        for(int i = 0; i < remotezones.size(); i++) {
             for(int j = 0; j < services.size(); j++) {
                String exists = sshCommand(remote: remote, command: "sudo docker service ls --filter 'name=${services[j].name}' -q")
                if (exists) {
                    sh "echo 'Atualizando serviço existente ${services[j].name}'"
                    sshCommand remote: remotezones[i], command: "docker service update --image " + registry + "${docker_image_name}:${env.BUILD_ID} ${services[j].name}"
                } else {
                    sh "echo 'Criando novo serviço ${services[j].name}'"
                    String runCommand = "docker service create --name ${services[j].name} --publish ${services[j].external_port}:${services[j].internal_port} " + registry + "${docker_image_name}:${env.BUILD_ID}"
                    sshCommand remote: remotezones[i], command: runCommand
                }
             }
        }
    } catch (Exception e) {
        sh "echo $e"
        currentBuild.result = 'ABORTED'
        error('Erro')
    }
}

def notify_on_discord() {
     discordSend description: "Build Number: ${env.BUILD_ID}", link: env.BUILD_URL, result: currentBuild.currentResult, title: JOB_NAME, webhookURL: "https://discord.com/api/webhooks/834020499549061120/YquHW3BBhl-WwQHVWr5YlccZCx96qeFYjhR6DYNVQkoqJqVmYprgBpEqw21-zJC9ENKm"
}